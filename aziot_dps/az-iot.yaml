---
- name: Azure IoT DPS execution
  hosts: localhost
  connection: local
  vars:
    dpsname: nvidia-jetson
    resourcegroup: nvidia-jetson
    name: rootca
    enrollmentid: nvidia-jetson
    
  tasks:
  - name: Folder Creation in the home folder
    file:
      path: $HOME/certs
      state: directory
  - name: Download certificate generation scripts
    shell: |
     curl https://raw.githubusercontent.com/Azure/azure-iot-sdk-c/master/tools/CACertificates/certGen.sh --output certGen.sh
     curl https://raw.githubusercontent.com/Azure/azure-iot-sdk-c/master/tools/CACertificates/openssl_device_intermediate_ca.cnf --output openssl_device_intermediate_ca.cnf
     curl https://raw.githubusercontent.com/Azure/azure-iot-sdk-c/master/tools/CACertificates/openssl_root_ca.cnf --output openssl_root_ca.cnf
     chmod 700 certGen.sh
     ./certGen.sh create_root_and_intermediate
    args:
      chdir: $HOME/certs

  # - name: Check Az CLI is installed on the machine
  #   shell: "which az iot"
  #   register: result
  #   ignore_errors: true

  # - fail:
  #     msg: "Azure CLI is not found. Please install it first"
  #   when: result.rc != 0
        # if ["$rootexists" == "rootca"]  
      # then
      #az iot dps certificate update --dps-name "{{ dpsname }}" --resource-group "{{ resourcegroup }}" --name MyCertificate --path /certificates/NewCertificate.pem --etag $etag
      # else
      # az iot dps certificate create --dps-name "{{ dpsname }}" --resource-group "{{ resourcegroup }}" --name "{{ name }}" --path ./certs/azure-iot-test-only.root.ca.cert.pem
      # fi

  - name: Upload Generated Root CA to DPS
    shell: |
      rootexists=$(az iot dps certificate show --dps-name  "{{ dpsname }}" --resource-group  "{{ dpsname }}" --name "{{ name }}" --query "name" -o tsv)
      etag=$(az iot dps certificate show --dps-name  "{{ dpsname }}" --resource-group  "{{ dpsname }}" --name "{{ name }}" --query "etag" -o tsv)
      az iot dps certificate update --dps-name "{{ dpsname }}" --resource-group "{{ resourcegroup }}" --name "{{ name }}" --path ./certs/azure-iot-test-only.root.ca.cert.pem --etag $etag
    args:
      chdir: $HOME/certs/
  
  - name: Generate Proof of Possesion and Verification
    shell: |
      etag=$(az iot dps certificate show --dps-name  "{{ dpsname }}" --resource-group  "{{ dpsname }}" --name "{{ name }}" --query "etag" -o tsv)
      verifycode=$(az iot dps certificate generate-verification-code --dps-name "{{ dpsname }}" --resource-group "{{ resourcegroup }}" --name "{{ name }}" --etag $etag  --query "properties.verificationCode" -o tsv)
      ./certGen.sh create_verification_certificate $verifycode
      az iot dps certificate verify --dps-name "{{ dpsname }}" --resource-group "{{ resourcegroup }}" --name "{{ name }}"  --path ./certs/verification-code.cert.pem --etag $etag
    args:
      chdir: $HOME/certs/

  - name: Create DPS Enrollment Group
    shell: |
      az iot dps enrollment-group create -g "{{ resourcegroup }}" --dps-name "{{ dpsname }}" --enrollment-id "{{ enrollmentid }}" --certificate-path ./certs/verification-code.cert.pem
    args:
      chdir: $HOME/certs/
    
    


    

